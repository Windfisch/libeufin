#!/usr/bin/env python3

import click
from requests import post, get
from Crypto.PublicKey import RSA 
from urllib.parse import urljoin


CUSTOMERS_PATH = "/tmp/libeufindata/customers"

@click.group()
@click.option(
    "--base-url", default="http://localhost:5000/",
    help="Base URL of the bank (defaults to http://localhost:5000/)")
@click.pass_context
def cli(ctx, base_url):
    ctx.obj = dict(base_url=base_url)

@cli.group()
def admin():
    pass

@admin.command(help="Create a new customer (generating name)")
@click.pass_obj
def customers(obj):
    
    from faker import Faker
    name = Faker().name()
    
    url = urljoin(obj["base_url"], "/admin/customers")
    print("Sending request for: {} to {}".format(name, url))
    try:
        resp = post(url, json=dict(name=name))
    except Exception:
        print("Could not reach the bank")

    # use the customer id contained in the response to
    # query for your details.
    print(resp)
    customer_id = resp.get("id")
    assert(customer_id != None)

    customer_path = "{}/{}".format(CUSTOMERS_PATH, customer_id)
    try:
        os.makedirs(customer_path)
    except OSError as e:
        # For now, just overwrite all is found under existing directory.
        assert(e.errno == errno.EEXIST)

    # Generate keys for new user.
    for keytype in ("eskey", "iakey", "enckey"):

        key = RSA.generate(2048)
        pem = key.exportKey("PEM").decode("ascii")
        keyfile = open("{}/{}.pem".format(customer_path, keytype), "w")
        keyfile.write(pem)
        keyfile.write("\n")
        keyfile.close()
        print("{} saved".format(keytype))

@admin.command(help="Ask details about a customer")
@click.option("--customer-id", help="bank non-EBICS identifier of the customer")
@click.pass_obj
def customer_info(obj):
    pass

@admin.command(
    help="Confirm INI and HIA messages via JSON API"
)
@click.option(
    "--customer-id", required=True,
    help="id of the customer at the bank (used to pick keyset on disk)"
)
def keyletter(enc_key, es_key, ia_key):

    try:
        eskey = RSA.importKey(
            open("{}/{}/eskey.pem".format(
                CUSTOMERS_PATH, customer_id), "r").read()
        )

        enckey = RSA.importKey(
            open("{}/{}/enckey.pem".format(
                CUSTOMERS_PATH, customer_id), "r").read()
        )

        iakey = RSA.importKey(
            open("{}/{}/iakey.pem".format(
                CUSTOMERS_PATH, customer_id), "r").read()
        )

    except FileNotFoundError:
        print("Could not find all the keys")

    # hex exponent = format(key.e, "x")
    # hex modulus = format(key.n, "x")

    # post(url, json=body)

cli()
