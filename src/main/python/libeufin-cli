#!/usr/bin/env python3

import os
import click
import hashlib
from datetime import datetime
from requests import post, get
from Crypto.PublicKey import RSA 
from urllib.parse import urljoin
from mock import MagicMock, patch

CUSTOMERS_PATH = "/tmp/libeufindata/customers"
RECIPIENT_BANK = "LibEuBank"
RSA_LENGTH = 2048 # is length for both exponent and modulus?
IA_VERSION = "X002"
ENC_VERSION = "E002"
ES_VERSION = "A005"

@click.group()
@click.option(
    "--base-url", default="http://localhost:5000/",
    help="Base URL of the bank (defaults to http://localhost:5000/)")
@click.pass_context
def cli(ctx, base_url):
    ctx.obj = dict(base_url=base_url)

@cli.group()
def admin():
    pass

@admin.command(help="Create a new customer (generating name)")
@click.pass_obj
def customers(obj):
    
    from faker import Faker
    name = Faker().name()
    
    url = urljoin(obj["base_url"], "/admin/customers")
    print("Submitting '{}' to {}".format(name, url))
    try:
        resp = post(url, json=dict(name=name))
    except Exception:
        print("Could not reach the bank")

    # use the customer id contained in the response to
    # query for your details.
    customer_id = resp.json().get("id")
    assert(customer_id != None)

    customer_path = "{}/{}/".format(CUSTOMERS_PATH, customer_id)
    try:
        os.makedirs(customer_path)
    except OSError as e:
        # For now, just overwrite all is found under existing directory.
        assert(e.errno == errno.EEXIST)

    # Generate keys for new user.
    for keytype in ("eskey", "iakey", "enckey"):
        key = RSA.generate(RSA_LENGTH)
        pem = key.exportKey("PEM").decode("ascii")
        keyfile = open("{}/{}.pem".format(customer_path, keytype), "w")
        keyfile.write(pem)
        keyfile.write("\n")
        keyfile.close()
    print("Customer and private keys ({}) correctly generated.".format(customer_path))

@admin.command(help="Ask details about a customer")
@click.option(
    "--customer-id",
    help="bank non-EBICS identifier of the customer",
    required=True)
@click.pass_obj
def customer_info(obj, customer_id):

    url = urljoin(
        obj["base_url"], "/admin/customers/{}".format(customer_id)
    )

    try:
        resp = get(url)
    except Exception:
        print("Could not reach the bank, aborting")
        return
    
    if resp.status_code != 200:
        print("Failed request, status: {}".format(resp.status_code))
        return

    print(resp.json())

@admin.command(
    help="Confirm INI and HIA messages via JSON API"
)
@click.option(
    "--customer-id",
    help="id of the customer at the bank (used to pick keyset on disk)"
)
@click.option(
    "--mock-info",
    is_flag=True,
    help="Mocks customer details instead of requesting ebics-info")
@click.pass_obj
def keyletter(obj, customer_id, mock_info):

    if not mock_info and not customer_id:
        print("Need --customer-id when not mocking ebics-info, aborting")
        return

    resp = MagicMock()
    resp.status_code = 200
    resp.json.return_value = dict(
        name="Mock Name",
        ebicsInfo=dict(userId="u1")
    )

    if mock_info:
        print("Mocking ebics-info")
    else:
        try:
            url = urljoin(
                obj["base_url"], "/admin/customers/{}".format(customer_id)
            )
            resp = get(url)
        except Exception:
            print("Could not connect to the bank, aborting")
            return

    assert(resp.status_code == 200)
    user_id = resp.json().get("ebicsInfo", {}).get("userId")
    name = resp.json().get("name")
    assert(user_id)
    assert(name)

    # Take timestamp.
    ts = datetime.now()

    # Get keys from disk.
    try:
        eskey = RSA.importKey(
            open("{}/{}/eskey.pem".format(
                CUSTOMERS_PATH, customer_id), "r").read()
        )

        enckey = RSA.importKey(
            open("{}/{}/enckey.pem".format(
                CUSTOMERS_PATH, customer_id), "r").read()
        )

        iakey = RSA.importKey(
            open("{}/{}/iakey.pem".format(
                CUSTOMERS_PATH, customer_id), "r").read()
        )

    except FileNotFoundError:
        print("Could not find all the keys; mocking them all now")
        eskey = RSA.generate(RSA_LENGTH)
        enckey = RSA.generate(RSA_LENGTH)
        iakey = RSA.generate(RSA_LENGTH)

    es_exponent = format(eskey.e, "x")
    es_modulus = format(eskey.n, "x")

    ia_exponent = format(iakey.e, "x")
    ia_modulus = format(iakey.n, "x")

    enc_exponent = format(enckey.e, "x")
    enc_modulus = format(enckey.n, "x")

    # Make the request body.
    body = dict(

        INI=dict(
            userId=user_id,
            customerId=customer_id,
            name=name,
            date=ts.strftime("%d.%m.%Y"),
            time=ts.strftime("%H.%M.%S"),
            recipient=RECIPIENT_BANK,
            version=ES_VERSION,
            exponent_length=RSA_LENGTH,
            exponent=es_exponent,
            modulus_length=RSA_LENGTH,
            modulus=es_modulus,
            hash=hashlib.sha256("{} {}".format(es_exponent, es_modulus).encode()).hexdigest()
        ),

        HIA=dict(
            userId=user_id,
            customerId=customer_id,
            name=name,
            date=ts.strftime("%d.%m.%Y"),
            time=ts.strftime("%H.%M.%S"),
            recipient=RECIPIENT_BANK,
            ia_version=IA_VERSION,
            ia_exponent_length=RSA_LENGTH,
            ia_exponent=ia_exponent,
            ia_modulus_length=RSA_LENGTH,
            ia_modulus=ia_modulus,
            ia_hash=hashlib.sha256("{} {}".format(ia_exponent, ia_modulus).encode()).hexdigest(),
            enc_version=ENC_VERSION,
            enc_exponent_length=RSA_LENGTH,
            enc_exponent=enc_exponent,
            enc_modulus_length=RSA_LENGTH,
            enc_modulus=enc_modulus,
            enc_hash=hashlib.sha256("{} {}".format(enc_exponent, enc_modulus).encode()).hexdigest()
        )
    )

    try:
        resp = post(url, json=body)
    except Exception:
        print("Could not reach the bank, aborting now")
        return

    if resp.status_code != 200:
        print("Bank did not accept this letter.")
        return

    print("Letter accepted by the bank!")

cli()
