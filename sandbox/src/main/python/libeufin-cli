#!/usr/bin/env python3

import os
import click
import json
import hashlib
import errno
from datetime import datetime
from requests import post, get
from urllib.parse import urljoin
from getpass import getpass

@click.group()
@click.option(
    "--nexus-base-url", default="http://localhost:5001/",
    help="Base URL of the nexus (defaults to http://localhost:5001/)"
)
@click.pass_context
def cli(ctx, nexus_base_url):
    ctx.obj = dict(nexus_base_url=nexus_base_url)

@cli.group()
def admin():
    pass


@admin.command(help="Instruct the Sandbox to create a new EBICS host ID.")
@click.option(
    "--sandbox-url",
    help="URL (with path) of the Sandbox that will activate the new Subscriber",
    required=True
)
@click.option(
    "--host-id",
    help="EBICS host ID",
    required=True
)
@click.option(
    "--ebics-version",
    help="EBICS version to support",
    required=True
)
def add_host(sandbox_url, host_id, ebics_version):
    body = dict(
        hostId=host_id,
        ebicsVersion=ebics_version
    )
    try:
        resp = post(sandbox_url, json=body)
    except Exception:
        print("Could not reach the Sandbox")
        return

    print(resp.content.decode("utf-8"))

@admin.command(help="Instruct the Sandbox to create a new EBICS Subscriber")
@click.option(
    "--sandbox-url",
    help="URL (with path) of the Sandbox that will activate the new Subscriber",
    required=True
)
@click.option(
    "--user-id",
    help="EBICS user ID",
    required=True
)
@click.option(
    "--partner-id",
    help="EBICS partner ID",
    required=True
)
@click.option(
    "--host-id",
    help="EBICS host ID",
    required=True
)
@click.option(
    "--name",
    help="Name of the person associated with the user ID",
    required=True
)
def add_subscriber(sandbox_url, user_id, partner_id, host_id, name):
    body = dict(
            userID=user_id,
            partnerID=partner_id,
            hostID=host_id,
            name=name
    )

    try:
        resp = post(sandbox_url, json=body)
    except Exception:
        print("Could not reach the Sandbox")
        return

    print(resp.content.decode("utf-8"))

@cli.group()
def ebics():
    pass

@cli.group()
@click.option(
    "--sandbox-base-url", default="http://localhost:5000/",
    help="Base URL of the Sandbox (defaults to http://localhost:5000/)"
)
@click.pass_context
def native(ctx, sandbox_base_url):
    ctx.obj.update(sandbox_base_url=sandbox_base_url)
    pass

@ebics.command(help="Send the HEV message to the bank.")
@click.pass_obj
@click.option(
    "--customer-id",
    help="Customer id",
    required=True
)
def hev(obj, customer_id):
    url = urljoin(obj["nexus_base_url"], "/ebics/{}/sendHev".format(customer_id))
    try:
        resp = get(url)
    except Exception:
        print("Unsuccessful request")
        return

    print(resp.content.decode("utf-8"))

@ebics.command(help="Restore private keys backup.")
@click.pass_obj
@click.option(
    "--customer-id",
    help="Numerical ID of the customer at the Nexus",
    required=False,
    default=1)
@click.option(
    "--backup-file",
    help="File where the backup is stored",
    required=False,
    default="/tmp/backup.json")
def restore(obj, customer_id, backup_file):
    try:
        backup = open(backup_file, "r")
    except Exception:
        print("Could not open the backup at {}".format(backup_file))
        return

    backup_json = json.loads(backup.read())
    backup.close()
    passphrase = getpass("Passphrase: ")
    backup_json["passphrase"] = passphrase

    url = urljoin(obj["nexus_base_url"], "/ebics/subscribers/{}/restoreBackup".format(customer_id))

    try:
        response = post(url, json=backup_json)
    except Exception:
        print("Could not reach the bank")
        return

    if response.status_code != 200:
        print("Unsuccessful status code gotten: {}".format(response.status_code))
        return

    print("Keys successfully restored")


@ebics.command(help="Obtain passphrase-protected private keys")
@click.pass_obj
@click.option(
    "--customer-id",
    help="Numerical ID of the customer at the Nexus",
    required=False,
    default=1)
@click.option(
    "--output-file",
    help="File that will store the backup",
    required=False,
    default="/tmp/backup.json")
def backup(obj, customer_id, output_file):
    passphrase = getpass("Passphrase: ")
    passphrase_again = getpass("Passphrase (again): ")

    if passphrase != passphrase_again:
        print("Passphrase differs, exiting.")
        return

    url = urljoin(obj["nexus_base_url"], "/ebics/subscribers/{}/backup".format(customer_id))

    try:
        response = post(url, json=dict(passphrase=passphrase))
    except Exception:
        print("Could not reach the bank")
        return

    if response.status_code != 200:
        print("Unsuccessful status code gotten: {}".format(response.status_code))
        return
    
    output = open(output_file, "w+")
    output.write(response.text)
    output.close()

    print("Backup stored in {}".format(output_file))


@ebics.command(help="Send TST message")
@click.pass_obj
@click.option(
    "--customer-id",
    help="Numerical ID of the customer at the Nexus",
    required=False,
    default=1)
def tst(obj, customer_id):
    
    url = urljoin(obj["nexus_base_url"], "/ebics/subscribers/{}/sendTst".format(customer_id))
    try:
        resp = post(url)
    except Exception:
        print("Could not reach the bank")
        return

    print(resp.content.decode("utf-8"))



@ebics.command(help="Send C52 message")
@click.pass_obj
@click.option(
    "--customer-id",
    help="Numerical ID of the customer at the Nexus",
    required=False,
    default=1)
def c52(obj, customer_id):
    
    url = urljoin(obj["nexus_base_url"], "/ebics/subscribers/{}/sendC52".format(customer_id))
    try:
        resp = post(url, json=dict(start="1970-01-01", end="2020-12-31"))
    except Exception:
        print("Could not reach the bank")
        return

    print(resp.content.decode("utf-8"))


@ebics.command(help="Send INI message")
@click.pass_obj
@click.option(
    "--customer-id",
    help="Numerical ID of the customer at the Nexus",
    required=False,
    default=1)
def ini(obj, customer_id):
    
    url = urljoin(obj["nexus_base_url"], "/ebics/subscribers/{}/sendIni".format(customer_id))
    try:
        resp = post(url)
    except Exception:
        print("Could not reach the bank")
        return

    print(resp.content.decode("utf-8"))




@ebics.command(help="Give and get keys.")
@click.pass_context
@click.option(
    "--customer-id",
    help="Numerical ID of the customer at the Nexus",
    required=False,
    default=1)
def prepare(ctx, customer_id):
    ctx.invoke(ini)
    ctx.invoke(hia)
    ctx.invoke(sync)


@ebics.command(help="Send HTD message")
@click.pass_context
@click.option(
    "--customer-id",
    help="Numerical ID of the customer at the Nexus",
    required=False,
    default=1)
@click.option(
    "--prepare/--no-prepare",
    help="Gets keying done before requesting HTD",
    required=False,
    default=False)
def htd(ctx, customer_id, prepare):

    if prepare:
        ctx.invoke(ini)
        ctx.invoke(hia)
        ctx.invoke(sync)

    url = urljoin(ctx.obj["nexus_base_url"], "/ebics/subscribers/{}/sendHtd".format(customer_id))
    try:
        resp = get(url)
    except Exception:
        print("Could not reach the bank")
        return

    print(resp.content.decode("utf-8"))

@ebics.command(help="Send HIA message")
@click.pass_obj
@click.option(
    "--customer-id",
    help="Numerical ID of the customer at the Nexus",
    required=False,
    default=1)
def hia(obj, customer_id):
    
    url = urljoin(obj["nexus_base_url"], "/ebics/subscribers/{}/sendHia".format(customer_id))
    try:
        resp = post(url)
    except Exception:
        print("Could not reach the bank")
        return

    print(resp.content.decode("utf-8"))

@ebics.command(help="Send HPB message")
@click.pass_obj
@click.option(
    "--customer-id",
    help="Numerical ID of the customer at the Nexus",
    required=False,
    default=1)
def sync(obj, customer_id):
    
    url = urljoin(obj["nexus_base_url"], "/ebics/subscribers/{}/sync".format(customer_id))
    try:
        resp = post(url)
    except Exception:
        print("Could not reach the bank")
        return

    print(resp.content.decode("utf-8"))


@ebics.command(help="Retrieve all the customers managed by Nexus")
@click.pass_obj
def subscribers(obj):
    
    url = urljoin(obj["nexus_base_url"], "/ebics/subscribers")
    try:
        resp = get(url)
    except Exception:
        print("Could not reach Nexus at {}".format(url))
        return

    print(resp.content.decode("utf-8"))

@ebics.command(help="Activate a new subscriber into Nexus")
@click.pass_obj
@click.option(
    "--ebics-url",
    help="URL of the EBICS server",
    required=True
)
@click.option(
    "--user-id",
    help="ID of the user to add in the system",
    required=True
)
@click.option(
    "--partner-id",
    help="ID of the partner associated with the user" ,
    required=True
)
@click.option(
    "--system-id",
    help="ID of the software acting on behalf of this user" ,
    required=False
)
@click.option(
    "--host-id",
    help="ID of the EBICS server" ,
    required=True
)
def new_subscriber(obj, user_id, partner_id, system_id, host_id, ebics_url):
    nexus_url = urljoin(obj["nexus_base_url"], "/ebics/subscribers")
    body = dict(
            ebicsURL=ebics_url,
            userID=user_id,
            partnerID=partner_id,
            hostID=host_id
    )

    if system_id:
        body.update(system_id)

    try:
        resp = post(nexus_url, json=body)
    except Exception:
        print("Could not reach the Nexus")
        return

    print(resp.content.decode("utf-8"))

@native.command(help="Ask the list of transactions related to one account")
@click.pass_obj
@click.option(
    "--user-id",
    help="ID of the bank customer (no EBICS correlation implied/needed)" ,
    required=False,
    default=1
)
@click.option(
    "--start",
    help="Starting date for history elements (YYYY-MM-DD)" ,
    required=False,
    default=None
)
@click.option(
    "--end",
    help="Ending date for history elements (YYYY-MM-DD)" ,
    required=False,
    default=None
)
def history(obj, user_id, start, end):

    url = urljoin(obj["sandbox_base_url"], f"/{user_id}/history")
    print(url)
    try:
        resp = post(url, json=dict(start=start, end=end))
    except Exception:
        print("Could not reach the bank")
        return

    print(resp.content.decode("utf-8"))


@native.command(help="Ask the balance for a given customer of the bank")
@click.pass_obj
@click.option(
    "--user-id",
    help="ID of the bank customer (no EBICS correlation implied/needed)" ,
    required=False,
    default=1
)
def balance(obj, user_id):
    
    url = urljoin(obj["sandbox_base_url"], f"/{user_id}/balance")
    print(url)
    try:
        resp = get(url)
    except Exception:
        print("Could not reach the bank")
        return

    print(resp.content.decode("utf-8"))

cli()
