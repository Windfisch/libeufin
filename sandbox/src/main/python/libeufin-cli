#!/usr/bin/env python3

import os
import click
import hashlib
import errno
from datetime import datetime
from requests import post, get
from Crypto.PublicKey import RSA 
from urllib.parse import urljoin

@click.group()
@click.option(
    "--base-url", default="http://localhost:5001/",
    help="Base URL of the nexus (defaults to http://localhost:5001/)")
@click.pass_context
def cli(ctx, base_url):
    ctx.obj = dict(base_url=base_url)

@cli.group()
def ebics():
    pass

@ebics.command(help="send INI message")
@click.pass_obj
@click.option(
    "--customer-id",
    help="numerical ID of the customer at the Nexus",
    required=False,
    default=1)
def ini(obj, customer_id):
    
    url = urljoin(obj["base_url"], "/ebics/subscribers/{}/sendIni".format(customer_id))
    try:
        resp = post(url)
    except Exception:
        print("Could not reach the bank")
        return

    assert(resp.status_code == 200)
    print(resp.content.decode("utf-8"))


@ebics.command(help="send HIA message")
@click.pass_obj
@click.option(
    "--customer-id",
    help="numerical ID of the customer at the Nexus",
    required=False,
    default=1)
def hia(obj, customer_id):
    
    url = urljoin(obj["base_url"], "/ebics/subscribers/{}/sendHia".format(customer_id))
    try:
        resp = post(url)
    except Exception:
        print("Could not reach the bank")
        return

    assert(resp.status_code == 200)
    print(resp.content.decode("utf-8"))

@ebics.command(help="send HPB message")
@click.pass_obj
@click.option(
    "--customer-id",
    help="numerical ID of the customer at the Nexus",
    required=False,
    default=1)
def sync(obj, customer_id):
    
    url = urljoin(obj["base_url"], "/ebics/subscribers/{}/sync".format(customer_id))
    try:
        resp = post(url)
    except Exception:
        print("Could not reach the bank")
        return

    assert(resp.status_code == 200)
    print(resp.content.decode("utf-8"))

cli()
