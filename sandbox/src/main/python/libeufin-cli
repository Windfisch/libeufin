#!/usr/bin/env python3

import os
import click
import json
import hashlib
import errno
from datetime import datetime
from requests import post, get
from urllib.parse import urljoin
from getpass import getpass

@click.group()
def cli():
    pass

@cli.group()
@click.pass_context
def admin(ctx):
    pass

@admin.command(help="Instruct the sandbox bank to create a new EBICS host ID.")
@click.option(
    "--host-id",
    help="EBICS host ID",
    required=True
)
@click.option(
    "--ebics-version",
    help="EBICS version to support",
    required=True
)
@click.argument(
    "bank-base-url"
)
@click.pass_obj
def add_host(obj, host_id, ebics_version, bank_base_url):
    url = urljoin(bank_base_url, "/ebics/hosts")
    body = dict(
        hostId=host_id,
        ebicsVersion=ebics_version
    )
    try:
        resp = post(url, json=body)
    except Exception:
        print("Could not reach the Bank")
        return

    print(resp.content.decode("utf-8"))

@admin.command(help="Instruct the sandbox bank to create a new EBICS Subscriber")
@click.pass_obj
@click.option(
    "--user-id",
    help="EBICS user ID",
    required=True
)
@click.option(
    "--partner-id",
    help="EBICS partner ID",
    required=True
)
@click.option(
    "--host-id",
    help="EBICS host ID",
    required=True
)
@click.option(
    "--name",
    help="Name of the person associated with the user ID",
    required=True
)
@click.argument(
    "bank-base-url"
)
def add_subscriber(obj, user_id, partner_id, host_id, name, bank_base_url):
    body = dict(
            userID=user_id,
            partnerID=partner_id,
            hostID=host_id,
            name=name
    )

    url = urljoin(bank_base_url, "/admin/add/subscriber")
    try:
        resp = post(url, json=body)
    except Exception as e:
        print(e)
        return

    print(resp.content.decode("utf-8"))

@cli.group()
@click.pass_context
def ebics(ctx):
    pass

@cli.group()
def native():
    pass

@ebics.command(help="Send the HEV message to the bank.")
@click.pass_obj
@click.option(
    "--account-id",
    help="Customer id",
    required=True
)
@click.argument(
  "nexus-base-url"
)
def hev(obj, account_id, nexus_base_url):
    url = urljoin(nexus_base_url, "/ebics/{}/sendHev".format(account_id))
    try:
        resp = get(url)
    except Exception:
        print("Unsuccessful request")
        return

    print(resp.content.decode("utf-8"))

@ebics.command(help="Restore private keys backup.")
@click.pass_obj
@click.option(
    "--account-id",
    help="Numerical ID of the customer at the Nexus",
    required=True
)
@click.option(
    "--backup-file",
    help="File where the backup is stored",
    required=False,
    default="/tmp/backup.json")
@click.argument(
  "nexus-base-url"
)
def restore(obj, account_id, backup_file, nexus_base_url):
    try:
        backup = open(backup_file, "r")
    except Exception:
        print("Could not open the backup at {}".format(backup_file))
        return

    backup_json = json.loads(backup.read())
    backup.close()
    passphrase = getpass("Passphrase: ")
    backup_json["passphrase"] = passphrase

    url = urljoin(nexus_base_url, "/ebics/subscribers/{}/restoreBackup".format(account_id))

    try:
        response = post(url, json=backup_json)
    except Exception:
        print("Could not reach the bank")
        return

    print("Status code: {}".format(response.status_code))
    print("Nexus says: {}".format(response.content.decode("utf-8")))

@ebics.command(help="Obtain public keys of a nexus ebics account")
@click.pass_obj
@click.option(
    "--account-id",
    help="Numerical ID of the customer at the Nexus",
    required=True
)
@click.argument(
  "nexus-base-url"
)
def pubkeys(obj, account_id, nexus_base_url):
    url = urljoin(nexus_base_url, "/ebics/subscribers/{}/pubkeys".format(account_id))

    try:
        response = get(url)
    except Exception as e:
        print("Could not reach nexus:", e)
        return

    print(response.content.decode("utf-8"))

@ebics.command(help="Obtain passphrase-protected private keys")
@click.pass_obj
@click.option(
    "--account-id",
    help="Numerical ID of the customer at the Nexus",
    required=True
)
@click.option(
    "--output-file",
    help="File that will store the backup",
    required=False,
    default="/tmp/backup.json")
@click.argument(
  "nexus-base-url"
)
def backup(obj, account_id, output_file, nexus_base_url):
    passphrase = getpass("Passphrase: ")
    passphrase_again = getpass("Passphrase (again): ")

    if passphrase != passphrase_again:
        print("Passphrase differs, exiting.")
        return

    url = urljoin(nexus_base_url, "/ebics/subscribers/{}/backup".format(account_id))

    try:
        response = post(url, json=dict(passphrase=passphrase))
    except Exception:
        print("Could not reach the bank")
        return

    if response.status_code != 200:
        print("Received unsuccessful status code: {}".format(response.status_code))
        return
    
    output = open(output_file, "w+")
    output.write(response.text)
    output.close()

    print("Backup stored in {}".format(output_file))


@ebics.command(help="Ask for list of Subscriber's bank accounts (requires HTD first)")
@click.pass_obj
@click.option(
    "--account-id",
    help="Numerical ID of the customer at the Nexus",
    required=True
)
@click.argument(
  "nexus-base-url"
)
def bank_accounts(obj, account_id, nexus_base_url):
    
    url = urljoin(nexus_base_url, "/ebics/subscribers/{}/accounts".format(account_id))
    try:
        resp = get(url)
    except Exception:
        print("Could not reach the nexus")
        return

    print(resp.content.decode("utf-8"))


@ebics.command(help="Send test upload message (TSU)")
@click.pass_obj
@click.option(
    "--account-id",
    help="Numerical ID of the customer at the Nexus",
    required=True
)
@click.argument(
  "nexus-base-url"
)
def tsu(obj, account_id, nexus_base_url):
    
    url = urljoin(nexus_base_url, "/ebics/subscribers/{}/sendTSU".format(account_id))
    try:
        resp = post(url)
    except Exception:
        print("Could not reach the nexus")
        return

    print(resp.content.decode("utf-8"))


@ebics.command(help="Send test download message (TSD)")
@click.pass_obj
@click.option(
    "--account-id",
    help="Numerical ID of the customer at the Nexus",
    required=True
)
@click.argument(
  "nexus-base-url"
)
def tsd(obj, account_id, nexus_base_url):
    
    url = urljoin(nexus_base_url, "/ebics/subscribers/{}/sendTSD".format(account_id))
    try:
        resp = post(url)
    except Exception:
        print("Could not reach the nexus")
        return

    print(resp.content.decode("utf-8"))


@ebics.command(help="Send HAA message")
@click.pass_obj
@click.option(
    "--account-id",
    help="Numerical ID of the customer at the Nexus",
    required=True
)
@click.argument(
  "nexus-base-url"
)
def haa(obj, account_id, nexus_base_url):
    
    url = urljoin(nexus_base_url, "/ebics/subscribers/{}/sendHAA".format(account_id))
    try:
        resp = post(url)
    except Exception:
        print("Could not reach the bank")
        return

    print(resp.content.decode("utf-8"))

@ebics.command(help="Send HVZ message")
@click.pass_obj
@click.option(
    "--account-id",
    help="Numerical ID of the customer at the Nexus",
    required=True
)
@click.argument(
  "nexus-base-url"
)
def hvz(obj, account_id, nexus_base_url):
    
    url = urljoin(nexus_base_url, "/ebics/subscribers/{}/sendHVZ".format(account_id))
    try:
        resp = post(url)
    except Exception:
        print("Could not reach the bank")
        return

    print(resp.content.decode("utf-8"))


@ebics.command(help="Send HVU message")
@click.pass_obj
@click.option(
    "--account-id",
    help="Numerical ID of the customer at the Nexus",
    required=True
)
@click.argument(
  "nexus-base-url"
)
def hvu(obj, account_id, nexus_base_url):
    
    url = urljoin(nexus_base_url, "/ebics/subscribers/{}/sendHVU".format(account_id))
    try:
        resp = post(url)
    except Exception:
        print("Could not reach the bank")
        return

    print(resp.content.decode("utf-8"))

@ebics.command(help="Send HPD message")
@click.pass_obj
@click.option(
    "--account-id",
    help="Numerical ID of the customer at the Nexus",
    required=True
)
@click.argument(
  "nexus-base-url"
)
def hpd(obj, account_id, nexus_base_url):
    
    url = urljoin(nexus_base_url, "/ebics/subscribers/{}/sendHPD".format(account_id))
    try:
        resp = post(url)
    except Exception:
        print("Could not reach the bank")
        return

    print(resp.content.decode("utf-8"))


@ebics.command(help="Send HKD message")
@click.pass_obj
@click.option(
    "--account-id",
    help="Numerical ID of the customer at the Nexus",
    required=True
)
@click.argument(
  "nexus-base-url"
)
def hkd(obj, account_id, nexus_base_url):
    url = urljoin(nexus_base_url, "/ebics/subscribers/{}/sendHKD".format(account_id))
    try:
        resp = post(url)
    except Exception:
        print("Could not reach the bank")
        return

    print(resp.content.decode("utf-8"))

@ebics.command(help="Send C52 message")
@click.pass_obj
@click.option(
    "--account-id",
    help="Numerical ID of the customer at the Nexus",
    required=True
)
@click.option(
    "--date-range",
    help="Date range for the query",
    nargs=2,
    required=False,
)
@click.argument(
  "nexus-base-url"
)
def c52(obj, account_id, date_range, nexus_base_url):
    if date_range is not None and len(date_range) == 2:
        req = dict(dateRange=dict(start=date_range[0], end=date_range[1]))
    else:
        req = dict()
    url = urljoin(nexus_base_url, "/ebics/subscribers/{}/sendC52".format(account_id))
    resp = post(url, json=req)
    print(resp.content.decode("utf-8"))


@ebics.command(help="Send C53 message")
@click.pass_obj
@click.option(
    "--account-id",
    help="Numerical ID of the customer at the Nexus",
    required=True
)
@click.option(
    "--date-range",
    help="Date range for the query",
    nargs=2,
    required=False,
)
@click.argument(
  "nexus-base-url"
)
def c53(obj, account_id, date_range, nexus_base_url):
    if date_range is not None and len(date_range) == 2:
        req = dict(dateRange=dict(start=date_range[0], end=date_range[1]))
    else:
        req = dict()
    url = urljoin(nexus_base_url, "/ebics/subscribers/{}/sendC53".format(account_id))
    resp = post(url, json=req)
    print(resp.content.decode("utf-8"))


@ebics.command(help="Send C54 message")
@click.pass_obj
@click.option(
    "--account-id",
    help="Numerical ID of the customer at the Nexus",
    required=True
)
@click.option(
    "--date-range",
    help="Date range for the query",
    nargs=2,
    required=False,
)
@click.argument(
  "nexus-base-url"
)
def c54(obj, account_id, date_range, nexus_base_url):
    if date_range is not None and len(date_range) == 2:
        req = dict(dateRange=dict(start=date_range[0], end=date_range[1]))
    else:
        req = dict()
    url = urljoin(nexus_base_url, "/ebics/subscribers/{}/sendC54".format(account_id))
    resp = post(url, json=req)
    print(resp.content.decode("utf-8"))


@ebics.command(help="Send PTK message")
@click.pass_obj
@click.option(
    "--account-id",
    help="Numerical ID of the customer at the Nexus",
    required=True
)
@click.option(
    "--date-range",
    help="Date range for the query",
    nargs=2,
    required=False,
)
@click.argument(
  "nexus-base-url"
)
def ptk(obj, account_id, date_range, nexus_base_url):
    url = urljoin(nexus_base_url, "/ebics/subscribers/{}/sendPTK".format(account_id))
    if date_range is not None and len(date_range) == 2:
        req = dict(dateRange=dict(start=date_range[0], end=date_range[1]))
    else:
        req = dict()
    print("requesting PTK", repr(req))
    try:
        resp = post(url, json=req)
    except Exception:
        print("Could not reach the bank")
        return

    print(resp.content.decode("utf-8"))


@ebics.command(help="Send HAC message")
@click.pass_obj
@click.option(
    "--account-id",
    help="Numerical ID of the customer at the Nexus",
    required=True
)
@click.option(
    "--date-range",
    help="Date range for the query",
    nargs=2,
    required=False,
)
@click.argument(
  "nexus-base-url"
)
def hac(obj, account_id, date_range, nexus_base_url):
    url = urljoin(nexus_base_url, "/ebics/subscribers/{}/sendHAC".format(account_id))
    if date_range is not None and len(date_range) == 2:
        req = dict(dateRange=dict(start=date_range[0], end=date_range[1]))
    else:
        req = dict()
    try:
        resp = post(url, json=req)
    except Exception:
        print("Could not reach the bank")
        return

    print(resp.content.decode("utf-8"))


@ebics.command(help="Send INI message")
@click.pass_obj
@click.option(
    "--account-id",
    help="Numerical ID of the customer at the Nexus",
    required=True
)
@click.argument(
    "nexus-base-url"
)
def ini(obj, account_id, nexus_base_url):
    
    url = urljoin(nexus_base_url, "/ebics/subscribers/{}/sendIni".format(account_id))
    try:
        resp = post(url)
    except Exception:
        print("Could not reach the bank")
        return

    print(resp.content.decode("utf-8"))


@ebics.command(help="Give and get keys.")
@click.pass_context
@click.option(
    "--account-id",
    help="Numerical ID of the customer at the Nexus",
    required=True
)
@click.argument(
    "nexus-base-url"
)
def prepare(ctx, account_id, nexus_base_url):
    ctx.invoke(ini, account_id=account_id, nexus_base_url=nexus_base_url)
    ctx.invoke(hia, account_id=account_id, nexus_base_url=nexus_base_url)
    ctx.invoke(sync, account_id=account_id, nexus_base_url=nexus_base_url)

@ebics.command(help="Send HTD message")
@click.pass_context
@click.option(
    "--account-id",
    help="Numerical ID of the customer at the Nexus",
    required=True
)
@click.option(
    "--prepare/--no-prepare",
    help="Gets keying done before requesting HTD",
    required=False,
    default=False)
@click.argument(
  "nexus-base-url"
)
def fetch_accounts(ctx, account_id, prepare, nexus_base_url):
    if prepare:
        ctx.invoke(ini)
        ctx.invoke(hia)
        ctx.invoke(sync)
    url = urljoin(nexus_base_url, "/ebics/subscribers/{}/fetch-accounts".format(account_id))
    try:
        resp = post(url, json=dict())
    except Exception:
        print("Could not reach the bank")
        return

    print(resp.content.decode("utf-8"))


@ebics.command(help="Send HIA message")
@click.pass_obj
@click.option(
    "--account-id",
    help="Numerical ID of the customer at the Nexus",
    required=True
)
@click.argument(
  "nexus-base-url"
)
def hia(obj, account_id, nexus_base_url):
    url = urljoin(nexus_base_url, "/ebics/subscribers/{}/sendHia".format(account_id))
    try:
        resp = post(url)
    except Exception:
        print("Could not reach the bank")
        return
    print(resp.content.decode("utf-8"))


@ebics.command(help="Send HPB message")
@click.pass_obj
@click.option(
    "--account-id",
    help="Numerical ID of the customer at the Nexus",
    required=True
)
@click.argument(
  "nexus-base-url"
)
def sync(obj, account_id, nexus_base_url):
    
    url = urljoin(nexus_base_url, "/ebics/subscribers/{}/sync".format(account_id))
    try:
        resp = post(url)
    except Exception:
        print("Could not reach the bank")
        return

    print(resp.content.decode("utf-8"))


@ebics.command(help="Retrieve all the customers managed by Nexus")
@click.pass_obj
@click.argument(
  "nexus-base-url"
)
def subscribers(obj, nexus_base_url):
    
    url = urljoin(nexus_base_url, "/ebics/subscribers")
    try:
        resp = get(url)
    except Exception:
        print("Could not reach Nexus at {}".format(url))
        return

    print(resp.content.decode("utf-8"))

@ebics.command(help="Activate a new subscriber into Nexus")
@click.pass_obj
@click.option(
    "--account-id",
    help="Alphanumeric ID (at the Nexus) of the new customer",
    required=True
)
@click.option(
    "--ebics-url",
    help="URL of the EBICS server",
    required=True
)
@click.option(
    "--user-id",
    help="ID of the user to add in the system",
    required=True
)
@click.option(
    "--partner-id",
    help="ID of the partner associated with the user" ,
    required=True
)
@click.option(
    "--system-id",
    help="ID of the software acting on behalf of this user" ,
    required=False
)
@click.option(
    "--host-id",
    help="ID of the EBICS server" ,
    required=True
)
@click.argument(
  "nexus-base-url"
)
def new_subscriber(obj, account_id, user_id, partner_id, system_id, host_id, ebics_url, nexus_base_url):
    nexus_url = urljoin(nexus_base_url, "/ebics/{}/subscribers".format(account_id))
    body = dict(
            ebicsURL=ebics_url,
            userID=user_id,
            partnerID=partner_id,
            hostID=host_id
    )
    if system_id:
        body.update(system_id)
    try:
        resp = post(nexus_url, json=body)
    except Exception:
        print("Could not reach the Nexus")
        return

    print(resp.content.decode("utf-8"))


@native.command(help="Ask the list of transactions related to one account")
@click.option(
    "--user-id",
    help="ID of the bank customer (no EBICS correlation implied/needed)" ,
    required=True
)
@click.option(
    "--start",
    help="Starting date for history elements (YYYY-MM-DD)" ,
    required=False,
    default=None
)
@click.option(
    "--end",
    help="Ending date for history elements (YYYY-MM-DD)" ,
    required=False,
    default=None
)
@click.argument(
  "bank-base-url"
)
def history(user_id, start, end, bank_base_url):

    url = urljoin(bank_base_url, f"/{user_id}/history")
    print(url)
    try:
        resp = post(url, json=dict(start=start, end=end))
    except Exception:
        print("Could not reach the bank")
        return

    print(resp.content.decode("utf-8"))


@native.command(help="Ask the balance for a given customer of the bank")
@click.option(
    "--user-id",
    help="ID of the bank customer (no EBICS correlation implied/needed)",
    required=True
)
@click.argument(
  "bank-base-url"
)
@click.pass_obj
def balance(obj, user_id, bank_base_url):
    
    url = urljoin(bank_base_url, f"/{user_id}/balance")
    print(url)
    try:
        resp = get(url)
    except Exception:
        print("Could not reach the bank")
        return

    print(resp.content.decode("utf-8"))

cli()
