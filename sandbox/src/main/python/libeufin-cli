#!/usr/bin/env python3

import os
import click
import json
import hashlib
import errno
from datetime import datetime
from requests import post, get
from Crypto.PublicKey import RSA 
from urllib.parse import urljoin
from getpass import getpass

@click.group()
@click.option(
    "--base-url", default="http://localhost:5001/",
    help="Base URL of the nexus (defaults to http://localhost:5001/)")
@click.pass_context
def cli(ctx, base_url):
    ctx.obj = dict(base_url=base_url)

@cli.group()
def ebics():
    pass


@ebics.command(help="Restore private keys backup.")
@click.pass_obj
@click.option(
    "--customer-id",
    help="numerical ID of the customer at the Nexus",
    required=False,
    default=1)
@click.option(
    "--backup-file",
    help="File where the backup is stored",
    required=False,
    default="/tmp/backup.json")
def restore(obj, customer_id, backup_file):
    try:
        backup = open(backup_file, "r")
    except Exception:
        print("Could not open the backup at {}".format(backup_file))
        return

    backup_json = json.loads(backup.read())
    backup.close()
    passphrase = getpass("Passphrase: ")
    backup_json["passphrase"] = passphrase

    url = urljoin(obj["base_url"], "/ebics/subscribers/{}/restoreBackup".format(customer_id))

    try:
        response = post(url, json=backup_json)
    except Exception:
        print("Could not reach the bank")
        return

    if response.status_code != 200:
        print("Unsuccessful status code gotten: {}".format(response.status_code))
        return

    print("Keys successfully restored")


@ebics.command(help="Obtain passphrase-protected private keys")
@click.pass_obj
@click.option(
    "--customer-id",
    help="numerical ID of the customer at the Nexus",
    required=False,
    default=1)
@click.option(
    "--output-file",
    help="File that will store the backup",
    required=False,
    default="/tmp/backup.json")
def backup(obj, customer_id, output_file):
    passphrase = getpass("Passphrase: ")
    passphrase_again = getpass("Passphrase (again): ")

    if passphrase != passphrase_again:
        print("Passphrase differs, exiting.")
        return

    url = urljoin(obj["base_url"], "/ebics/subscribers/{}/backup".format(customer_id))

    try:
        response = post(url, json=dict(passphrase=passphrase))
    except Exception:
        print("Could not reach the bank")
        return

    if response.status_code != 200:
        print("Unsuccessful status code gotten: {}".format(response.status_code))
        return
    
    output = open(output_file, "w+")
    output.write(response.text)
    output.close()

    print("Backup stored in {}".format(output_file))

@ebics.command(help="send INI message")
@click.pass_obj
@click.option(
    "--customer-id",
    help="numerical ID of the customer at the Nexus",
    required=False,
    default=1)
def ini(obj, customer_id):
    
    url = urljoin(obj["base_url"], "/ebics/subscribers/{}/sendIni".format(customer_id))
    try:
        resp = post(url)
    except Exception:
        print("Could not reach the bank")
        return

    print(resp.content.decode("utf-8"))




@ebics.command(help="Give and get keys.")
@click.pass_context
@click.option(
    "--customer-id",
    help="numerical ID of the customer at the Nexus",
    required=False,
    default=1)
def prepare(ctx, customer_id):
    ctx.invoke(ini)
    ctx.invoke(hia)
    ctx.invoke(sync)


@ebics.command(help="send HTD message")
@click.pass_context
@click.option(
    "--customer-id",
    help="numerical ID of the customer at the Nexus",
    required=False,
    default=1)
@click.option(
    "--prepare",
    help="Gets keying done before requesting HTD",
    required=False,
    default=True)
def htd(ctx, customer_id, prepare):

    if prepare:
        ctx.invoke(ini)
        ctx.invoke(hia)
        ctx.invoke(sync)

    url = urljoin(ctx.obj["base_url"], "/ebics/subscribers/{}/sendHtd".format(customer_id))
    try:
        resp = get(url)
    except Exception:
        print("Could not reach the bank")
        return

    print(resp.content.decode("utf-8"))

@ebics.command(help="send HIA message")
@click.pass_obj
@click.option(
    "--customer-id",
    help="numerical ID of the customer at the Nexus",
    required=False,
    default=1)
def hia(obj, customer_id):
    
    url = urljoin(obj["base_url"], "/ebics/subscribers/{}/sendHia".format(customer_id))
    try:
        resp = post(url)
    except Exception:
        print("Could not reach the bank")
        return

    print(resp.content.decode("utf-8"))

@ebics.command(help="send HPB message")
@click.pass_obj
@click.option(
    "--customer-id",
    help="numerical ID of the customer at the Nexus",
    required=False,
    default=1)
def sync(obj, customer_id):
    
    url = urljoin(obj["base_url"], "/ebics/subscribers/{}/sync".format(customer_id))
    try:
        resp = post(url)
    except Exception:
        print("Could not reach the bank")
        return

    print(resp.content.decode("utf-8"))


@ebics.command(help="retrieve all subscribers in the system")
@click.pass_obj
def subscribers(obj):
    
    url = urljoin(obj["base_url"], "/ebics/subscribers")
    try:
        resp = get(url)
    except Exception:
        print("Could not reach the bank")
        return

    print(resp.content.decode("utf-8"))

@ebics.command(help="insert new subscriber into Nexus")
@click.pass_obj
@click.option(
    "--ebics-url",
    help="URL of the EBICS server (defaults to http://localhost:5001/)",
    required=False
)
@click.option(
    "--user-id",
    help="ID of the user to add in the system" ,
    required=False
)
@click.option(
    "--partner-id",
    help="ID of the partner associated with the user" ,
    required=False
)
@click.option(
    "--system-id",
    help="ID of the software acting on behalf of this user" ,
    required=False
)
@click.option(
    "--host-id",
    help="ID of the EBICS server" ,
    required=False,
    default="host01"
)
def new(obj, user_id, partner_id, system_id, host_id, ebics_url):
    import random
    
    salt = random.randrange(0, 1000000000)
    if not user_id:
        user_id = "USER{}".format(salt)

    if not partner_id:
        partner_id = "PARTNER{}".format(salt)

    url = urljoin(obj["base_url"], "/ebics/subscribers")
    body = json=dict(
            ebicsURL=obj["base_url"],
            userID=user_id,
            partnerID=partner_id,
            hostID=host_id
    )

    if system_id:
        body.update(system_id)

    try:
        resp = post(url, json=body)
    except Exception:
        print("Could not reach the bank")
        return

    print(resp.content.decode("utf-8"))

cli()
