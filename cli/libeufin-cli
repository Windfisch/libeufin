#!/usr/bin/env python3

import os
import sys
import click
import json
import hashlib
import errno
from datetime import datetime
from requests import post, get, auth
from urllib.parse import urljoin
from getpass import getpass

def fetch_env():
    if "--help" in sys.argv:
        return []
    try:
        nexus_base_url = os.environ["NEXUS_BASE_URL"]
        nexus_username = os.environ["NEXUS_USERNAME"]
        nexus_password = os.environ["NEXUS_PASSWORD"]
    except KeyError:
        print(
            "Please ensure that NEXUS_BASE_URL,"
            " NEXUS_USERNAME, NEXUS_PASSWORD exist"
            " in the environment"
        )
        sys.exit(1)
    return nexus_base_url, nexus_username, nexus_password

class NexusAccess:
    def __init__(self, nexus_base_url=None, username=None, password=None):
        self.nexus_base_url = nexus_base_url
        self.username = username
        self.password = password

@click.group(help="General utility to invoke HTTP REST services offered by Nexus.")
def cli():
    pass

@cli.group()
@click.pass_context
def taler_facade(ctx):
    ctx.obj = NexusAccess(*fetch_env())
    pass

@cli.group()
@click.pass_context
def connections(ctx):
    ctx.obj = NexusAccess(*fetch_env())
    pass

@cli.group()
@click.pass_context
def accounts(ctx):
    ctx.obj = NexusAccess(*fetch_env())
    pass

@cli.group()
@click.pass_context
def sandbox(ctx):
    pass

@connections.command(help="export backup")
@click.option("--passphrase", help="Passphrase for locking the backup", required=True)
@click.option("--output-file", help="Where to store the backup", required=True)
@click.argument("connection-name")
@click.pass_obj
def export_backup(obj, connection_name, passphrase, output_file):
    url = urljoin(obj.nexus_base_url, "/bank-connections/{}/export-backup".format(connection_name))
    try:
        resp = post(
            url, json=dict(passphrase=passphrase),
            auth=auth.HTTPBasicAuth(obj.username, obj.password)
        )
    except Exception:
        print("Could not reach nexus at " + url)
        exit(1)

    output = open(output_file, "w+")
    output.write(resp.content.decode("utf-8"))
    output.close()

    print("Backup stored in {}".format(output_file))


@connections.command(help="delete bank connection")
@click.argument("connection-name")
@click.pass_obj
def delete(obj, connection_name):

    url = urljoin(obj.nexus_base_url, "/bank-connections/delete-connection".format(connection_name))
    try:
        resp = post(
            url,
            json=dict(bankConnectionId=connection_name),
            auth=auth.HTTPBasicAuth(obj.username, obj.password)
        )
    except Exception:
        print("Could not reach nexus at " + url)
        exit(1)

    print(resp.content.decode("utf-8"))

@connections.command(help="restore backup")
@click.option("--backup-file", help="Back file", required=True)
@click.option("--passphrase", help="Passphrase for locking the backup", required=True)
@click.argument("connection-name")
@click.pass_obj
def restore_backup(obj, backup_file, passphrase, connection_name):
    url = urljoin(obj.nexus_base_url, "/bank-connections")
    try:
        backup = open(backup_file, "r")
    except Exception:
        print("Could not open the backup at {}".format(backup_file))
        exit(1)
    backup_json = json.loads(backup.read())
    backup.close()

    try:
        resp = post(
            url,
            json=dict(
                name=connection_name,
                data=backup_json,
                passphrase=passphrase,
                source="backup"
            ),
            auth=auth.HTTPBasicAuth(obj.username, obj.password)

        )
    except Exception:
        print("Could not reach nexus at " + url)
        exit(1)

    print(resp.content.decode("utf-8"))


@connections.command(help="make new Ebics bank connection")
@click.option("--ebics-url", help="EBICS URL", required=True)
@click.option("--host-id", help="Host ID", required=True)
@click.option("--partner-id", help="Partner ID", required=True)
@click.option("--ebics-user-id", help="Ebics user ID", required=True)
@click.argument("connection-name")
@click.pass_obj
def new_ebics_connection(obj, connection_name, ebics_url, host_id, partner_id,
                         ebics_user_id):
    url = urljoin(obj.nexus_base_url, "/bank-connections")
    body = dict(
        name=connection_name,
        source="new",
        type="ebics",
        data=dict(ebicsURL=ebics_url, hostID=host_id, partnerID=partner_id, userID=ebics_user_id)
    )
    try:
        resp = post(url, json=body, auth=auth.HTTPBasicAuth(obj.username, obj.password))
    except Exception:
        print(f"Could not reach nexus at {url}: {resp.json()}")
        exit(1)
    print(resp.content.decode("utf-8"))

@connections.command(help="synchronize the bank connection")
@click.argument("connection-name")
@click.pass_obj
def sync(obj, connection_name):
    url = urljoin(obj.nexus_base_url, f"/bank-connections/{connection_name}/connect")
    try:
        resp = post(url, json=dict(), auth = auth.HTTPBasicAuth(obj.username, obj.password))
    except Exception:
        print(f"Could not reach nexus at {url}")
        exit(1)
    print(resp.content.decode("utf-8"))

@connections.command(help="import one bank account, chosen from the downloaded ones")
@click.option("--offered-account-id", help="Name of the account to import", required=True)
@click.option("--nexus-bank-account-id", help="Name to give to the imported account", required=True)
@click.argument("connection-name")
@click.pass_obj
def import_bank_account(obj, connection_name, offered_account_id, nexus_bank_account_id):
    url = urljoin(obj.nexus_base_url, "/bank-connections/{}/import-account".format(connection_name))
    try:
        resp = post(
            url,
            json=dict(
                offeredAccountId=offered_account_id,
                nexusBankAccountId=nexus_bank_account_id
            ),
            auth = auth.HTTPBasicAuth(obj.username, obj.password)
        )
    except Exception as e:
        print(f"Could not reach nexus at {url}: {e}")
        exit(1)
    print(resp.content.decode("utf-8"))

@connections.command(help="download bank accounts in raw format WITHOUT importing them")
@click.argument("connection-name")
@click.pass_obj
def download_bank_accounts(obj, connection_name):
    url = urljoin(obj.nexus_base_url, "/bank-connections/{}/fetch-accounts".format(connection_name))
    try:
        resp = post(url, json=dict(), auth = auth.HTTPBasicAuth(obj.username, obj.password))
    except Exception:
        print("Could not reach nexus at " + url)
        exit(1)
    print(resp.content.decode("utf-8"))

@connections.command(help="list the connections")
@click.pass_obj
def list_connections(obj):
    url = urljoin(obj.nexus_base_url, "/bank-connections/")
    try:
        resp = get(url, json=dict(), auth = auth.HTTPBasicAuth(obj.username, obj.password))
    except Exception:
        print("Could not reach nexus at " + url)
        exit(1)
    print(resp.content.decode("utf-8"))

@connections.command(help="list bank accounts hosted at one connection")
@click.argument("connection-name")
@click.pass_obj
def list_offered_bank_accounts(obj, connection_name):
    url = urljoin(obj.nexus_base_url, "/bank-connections/{}/accounts".format(connection_name))
    try:
        resp = get(url, json=dict(), auth = auth.HTTPBasicAuth(obj.username, obj.password))
    except Exception:
        print("Could not reach nexus at " + url)
        exit(1)
    print(resp.content.decode("utf-8"))

@accounts.command(help="show accounts belonging to calling user")
@click.pass_obj
def show(obj):
    url = urljoin(obj.nexus_base_url, "/bank-accounts")
    try:
        resp = get(url, auth=auth.HTTPBasicAuth(obj.username, obj.password))
    except Exception as e:
        print(f"Could not reach nexus at {url}, error: {e}")
        exit(1)
    print(resp.content.decode("utf-8"))

@accounts.command(help="prepare payment debiting 'account-name'")
@click.option("--credit-iban", help="IBAN that will receive the payment", required=True)
@click.option("--credit-bic", help="BIC that will receive the payment", required=False)
@click.option("--credit-name", help="Legal name that will receive the payment", required=True)
@click.option("--payment-amount", help="Amount to be paid (<currency>:X.Y)", required=True)
@click.option("--payment-subject", help="Subject of this payment", required=True)
@click.argument("account-name")
@click.pass_obj
def prepare_payment(obj, account_name, credit_iban, credit_bic, credit_name,
                    payment_amount, payment_subject):
    url = urljoin(obj.nexus_base_url, "/bank-accounts/{}/payment-initiations".format(account_name))
    body = dict(
        iban=credit_iban,
        bic=credit_bic,
        name=credit_name,
        subject=payment_subject,
        amount=payment_amount
    )

    try:
        resp = post(url, json=body, auth=auth.HTTPBasicAuth(obj.username, obj.password))
    except Exception:
        print("Could not reach nexus at " + url)
        exit(1)
    print(resp.content.decode("utf-8"))

@accounts.command(help="submit a prepared payment")
@click.option("--payment-uuid", help="payment unique identifier", required=True)
@click.argument("account-name")
@click.pass_obj
def submit_payment(obj, account_name, payment_uuid):
    url = urljoin(
        obj.nexus_base_url,
        "/bank-accounts/{}/payment-initiations/{}/submit".format(account_name, payment_uuid)
    )
    try:
        resp = post(url, json=dict(), auth = auth.HTTPBasicAuth(obj.username, obj.password))
    except Exception:
        print("Could not reach nexus at" + url)
        exit(1)
    print(resp.content.decode("utf-8"))

@accounts.command(help="fetch transactions from the bank")
@click.argument("account-name")
@click.pass_obj
def fetch_transactions(obj, account_name):
    url = urljoin(
        obj.nexus_base_url, "/bank-accounts/{}/fetch-transactions".format(account_name)
    )
    try:
        resp = post(url, auth = auth.HTTPBasicAuth(obj.username, obj.password))
    except Exception:
        print("Could not reach nexus " + url)
        exit(1)
    print(resp.content.decode("utf-8"))

@accounts.command(help="get transactions from the simplified nexus JSON API")
@click.argument("account-name")
@click.pass_obj
def transactions(obj, account_name):
    url = urljoin(obj.nexus_base_url, "/bank-accounts/{}/transactions".format(account_name))
    try:
        resp = get(url, auth = auth.HTTPBasicAuth(obj.username, obj.password))
    except Exception:
        print("Could not reach nexus " + url)
        exit(1)
    print(resp.content.decode("utf-8"))

@taler_facade.command(help="create a new Taler facade")
@click.option("--facade-name", help="Name of the Taler facade", required=True)
@click.argument("connection-name")
@click.argument("account-name")
@click.pass_obj
def new_facade(obj, facade_name, connection_name, account_name):
    url = urljoin(obj.nexus_base_url, "/facades")
    try:
        resp = post(
            url,
            auth=auth.HTTPBasicAuth(obj.username, obj.password,
            json=dict(
            name=facade_name,
            type="taler-wire-gateway",
            creator=obj.username,
            config=dict(
                bankAccount=account_name,
                bankConnection=connection_name,
                reserveTransferLevel="UNUSED",
                intervalIncremental="UNUSED"
            )
        )))
    except Exception:
        print("Could not reach sandbox")
        exit(1)
    print(resp.content.decode("utf-8"))

@sandbox.command(help="activate a Ebics host")
@click.option("--host-id", help="Ebics host ID", required=True)
@click.argument("sandbox-base-url")
@click.pass_obj
def make_ebics_host(obj, host_id, sandbox_base_url):
    url = urljoin(sandbox_base_url, "/admin/ebics/host")
    try:
        resp = post(url, json=dict(hostID=host_id, ebicsVersion="2.5"))
    except Exception:
        print("Could not reach sandbox")
        exit(1)
    print(resp.content.decode("utf-8"))

@sandbox.command(help="activate a Ebics subscriber")
@click.option("--host-id", help="Ebics host ID", required=True)
@click.option("--partner-id", help="Ebics partner ID", required=True)
@click.option("--user-id", help="Ebics user ID", required=True)
@click.argument("sandbox-base-url")
@click.pass_obj
def activate_ebics_subscriber(obj, host_id, partner_id, user_id, sandbox_base_url):
    url = urljoin(sandbox_base_url, "/admin/ebics/subscribers")
    try:
        resp = post(url, json=dict(hostID=host_id, partnerID=partner_id, userID=user_id))
    except Exception:
        print("Could not reach sandbox")
        exit(1)
    print(resp.content.decode("utf-8"))

@sandbox.command(help="associate a bank account to a Ebics subscriber")
@click.option("--iban", help="IBAN", required=True)
@click.option("--bic", help="BIC", required=True)
@click.option("--person-name", help="bank account owner name", required=True)
@click.option("--account-name", help="label of this bank account", required=True)
@click.option("--ebics-user-id", help="user ID of the Ebics subscriber", required=True)
@click.option("--ebics-host-id", help="host ID of the Ebics subscriber", required=True)
@click.option("--ebics-partner-id", help="partner ID of the Ebics subscriber", required=True)
@click.argument("sandbox-base-url")
@click.pass_obj
def associate_bank_account(obj, iban, bic, person_name, account_name,
                           ebics_user_id, ebics_host_id, ebics_partner_id, sandbox_base_url):
    url = urljoin(sandbox_base_url, "/admin/ebics/bank-accounts")
    body = dict(
        subscriber=dict(userID=ebics_user_id, partnerID=ebics_partner_id, hostID=ebics_host_id),
        iban=iban, bic=bic, name=person_name, label=account_name
    )

    try:
        resp = post(url, json=body)
    except Exception:
        print("Could not reach sandbox")
        exit(1)
    print(resp.content.decode("utf-8"))

@sandbox.command(help="book a payment in the sandbox")
@click.option("--creditor-iban", help="IBAN receiving the payment")
@click.option("--creditor-bic", help="BIC receiving the payment")
@click.option("--creditor-name", help="Name of the person who is receiving the payment")
@click.option("--debtor-iban", help="IBAN sending the payment")
@click.option("--debtor-bic", help="BIC sending the payment")
@click.option("--debtor-name", help="name of the person who is sending the payment")
@click.option("--amount", help="amount, no currency")
@click.option("--currency", help="currency")
@click.option("--subject", help="payment subject")
@click.argument("sandbox-base-url")
@click.pass_obj
def book_payment(obj, creditor_iban, creditor_bic, creditor_name, debtor_iban,
                 debtor_bic, debtor_name, amount, currency, subject, sandbox_base_url):

    url = urljoin(sandbox_base_url, "/admin/payments")
    body = dict(
        creditorIban=creditor_iban,
        creditorBic=creditor_bic,
        creditorName=creditor_name,
        debitorIban=debtor_iban,
        debitorBic=debtor_bic,
        debitorName=debtor_name,
        amount=amount,
        currency=currency,
        subject=subject
    )
    try:
        resp = post(url, json=body)
    except Exception:
        print("Could not reach sandbox")
        exit(1)
    print(resp.content.decode("utf-8"))

cli()
